include: "../common.smk"
SNAKE_DIR = os.path.normpath(os.path.dirname(workflow.snakefile))

################################################################################
#                             Stand-alone rules
################################################################################

OUT_DIR = config['out_dir'] if 'out_dir' in config else '.'

if stand_alone(['asm_fasta', 'hifi_fastq']):
    _, ASM_BASE, _ = parse_path(config['asm_fasta'])
    _, HIFI_BASE, _ = parse_path(config['hifi_fastq'])

    localrules: all
    rule all:
        input: f"{OUT_DIR}/{ASM_BASE}.{HIFI_BASE}.winnowmap.bam"

################################################################################
#                               Module rules
################################################################################

# TODO: Better way of handling inputs
rule winnowmap:
    input:
        asm  = "{dir}/asm.fasta",
        read = "{dir}/reads.fastq"
    output:
        bam  = "{dir}/{base}.winnowmap.bam",
        bai  = "{dir}/{base}.winnowmap.bam.bai",
        _    = directory(temp("{dir}/{base}.winnowmap.meryl")),
        __   = temp("{dir}/{base}.winnowmap.rep")
    log:
        "{dir}/{base}.winnowmap.log"
    threads: 128
    resources:
        mem_gb = 500,
        time = "72:00:00"
    params:
        script  = f"{SNAKE_DIR}/winnowmap.sh",
        module = get_modules(["samtools", "winnowmap"]),
        out_prefix = lambda wildcards, output: parse_path(output.bam)[1]
    shell:
        """
        module load {params.module}
        bash {params.script} {wildcards.dir} {input.read} {input.asm} {params.out_prefix} {threads} >{log} 2>&1
        """
